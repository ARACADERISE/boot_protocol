import yaml
import os
import sys
import json

if os.path.isfile('../boot.yaml'):
    format_needed = [
        # "Needed" section
        'n',
        # Pad
        bytes('\0',encoding='utf-8'),
        # Length of files for OS to work
        # 2 for 32-bit: second-stage and kernel
        # 3 for 64-bit: second-stage, protected-mode stub, 64-bit kernel
        str(0),
        bytes('\0',encoding='utf-8'),
        # 'f'
        'f',
        # Pad2
        bytes('\0',encoding='utf-8'),
        # 's' before second stage file/binary file
        # 'k' before kernel file/binary file
        # Filename size pad Filename pad binary file pad address pad file size
    ]
    format_extras = [
        # "Extra" section
        bytes('e',encoding='utf-8'),
        # Pad
        bytes('\0',encoding='utf-8'),
        # Extra section info
        bytes('i',encoding='utf-8'),
        # Pad2
        bytes('\0',encoding='utf-8'),
        # Total pad filename size pad Filename pad binary file pad address pad file size
    ]

    REQUIRED = [
        'kernel_binary',
        'kernel_addr',
        'kernel_source_code_file',
        'second_stage_binary',
        'second_stage_addr',
        'second_stage_source_code_file',
        'os_type'
    ]

    file = open('../boot.yaml', 'r')
    data = yaml.safe_load(file)
    file.close()

    for i in REQUIRED:
        if not i in data:
            print(f'Error: Expected `{i}` in `boot.yaml`.')
            sys.exit(1)
    
    if data['os_type'] == '32bit': format_needed[2] = bytes(str(2), encoding='utf-8')
    elif data['os_type'] == '64bit': format_needed[2] = bytes(str(3), encoding='utf-8')
    else: format_needed[2] = bytes(str(2), encoding='utf-8')

    # Make sure everything is right
    if 'bit64_kernel_binary' in data and format_needed[2] == 2:
        print('\nExpected 32-bit OS, found 64-bit descriptions of kernel binary.\n')
        sys.exit(0)

    extra_bins = None
    extra_source_files = None
    extra_addresses = None

    if 'extras' in data:
        extra = data['extras']

        extra_source_files = extra['files']
        extra_bins = extra['binaries']
        extra_addresses = extra['addresses']

        format_extras.append(len(extra_source_files))
        format_extras.append(0)

        for i in range(len(extra_source_files)):
            format_extras.append(bytes(str(len(extra_source_files[i])), encoding='utf-8'))
            format_extras.append(bytes('\0',encoding='utf-8'))
            format_extras.append(bytes(extra_source_files[i], encoding='utf-8'))
            format_extras.append(bytes('\0',encoding='utf-8'))
            format_extras.append(bytes(str(len(extra_bins[i])), encoding='utf-8'))
            format_extras.append(bytes('\0',encoding='utf-8'))
            format_extras.append(bytes(extra_bins[i], encoding='utf-8'))
            format_extras.append(bytes('\0',encoding='utf-8'))
            format_extras.append(bytes(str(extra_addresses[i]), encoding='utf-8'))
            format_extras.append(bytes('\0',encoding='utf-8'))

            if i == len(extra_source_files)-1: break
        
        format_extras.append(bytes('d', encoding='utf-8'))
        format_extras.append(bytes('\0',encoding='utf-8'))
    else:
        # Total = 0
        format_extras.append(bytes('\0',encoding='utf-8'))
        # Pad
        format_extras.append(bytes('\0',encoding='utf-8'))
        # Done
        format_extras.append(bytes('d', encoding='utf-8'))

    second_stage_source_code_file = data['second_stage_source_code_file']
    second_stage_source_code_file_o = second_stage_source_code_file.split('/')
    for i in range(len(second_stage_source_code_file_o)):
        if not '.' in second_stage_source_code_file_o[i]: del second_stage_source_code_file_o[i]
        if i == len(second_stage_source_code_file_o)-1: break
    
    second_stage_source_code_file_o = second_stage_source_code_file_o[0]
    second_stage_source_code_file_o = second_stage_source_code_file_o[:len(second_stage_source_code_file_o)-2]
    second_stage_source_code_file_o = f'{second_stage_source_code_file_o}.o'
    
    # Making the hex value of ss_addr look good
    ss_addr = str(hex(data['second_stage_addr']))
    ss_addr = ss_addr[2:]
    ss_addr = f'0x0{ss_addr}'
    r_ss_addr = ss_addr[3:]
    r_ss_addr = f'0x{r_ss_addr}0'

    format_needed.append(bytes('s', encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(str(len(second_stage_source_code_file)), encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_extras.append(second_stage_source_code_file)
    format_extras.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(str(len(second_stage_source_code_file_o)), encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(second_stage_source_code_file_o, encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))

    kernel_source_code_file = data['kernel_source_code_file']
    kernel_source_code_file_o = kernel_source_code_file.split('/')
    for i in range(len(kernel_source_code_file_o)):
        if not '.' in kernel_source_code_file[i]: del kernel_source_code_file_o[i]
        if i == len(kernel_source_code_file_o)-1: break
    
    kernel_source_code_file_o = kernel_source_code_file_o[0]
    kernel_source_code_file_o = kernel_source_code_file_o[:len(kernel_source_code_file_o)-2]
    kernel_source_code_file_o = f'{kernel_source_code_file_o}.o'
    

    format_needed.append(bytes('k',encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(ss_addr,encoding='utf-8'))
    format_needed.append(PAD)
    format_needed.append(bytes(str(len(kernel_source_code_file)), encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_extras.append(bytes(kernel_source_code_file, encoding='utf-8'))
    format_extras.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(str(len(kernel_source_code_file_o)), encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))
    format_needed.append(bytes(kernel_source_code_file_o, encoding='utf-8'))
    format_needed.append(bytes('\0',encoding='utf-8'))

    #if not format_extras[4] == 0:
    #    for i in format_extras:
    #        format_needed.append(i)
    
    file = open('config/something.bin', 'wb')
    for i in format_needed:
        try:
            file.write(i)
        except:
            file.write(bytes(str(i), encoding='utf-8'))
    file.close()
    sys.exit(1)
    if format_extras[4] > 0:
        file.write(bytes(1))
        for i in range(len(format_extras)):
            if i == len(format_extras) - 1: break
            try:
                file.write(bytes(format_extras[i]))
            except:
                if type(format_extras[i]) == str:
                    file.write(bytes(format_extras[i], encoding='utf-8'))
                else: file.write(bytes(str(format_extras[i]), encoding='utf-8'))
    file.close()
    sys.exit(0)
    
    print(json.dumps(format_needed,indent=2))
    sys.exit(0)

    file = open('../'+data['kernel_binary'], 'rb')
    kernel_binary_data = file.read();
    file.close()

    file = open('../'+data['second_stage_binary'], 'rb')
    second_stage_binary_data = file.read()
    file.close()

    # Getting the size(in sectors)
    ss_size = int(len(second_stage_binary_data)/512)

    # Checking the size
    if ss_size * 512 < len(second_stage_binary_data):
        ss_size += 1
    
    # Making the hex value of ss_size look good
    ss_size = str(hex(ss_size))
    ss_size = ss_size[2:]
    ss_size = f'0x0{ss_size}'

    # Making the hex value of kern_addr look good
    kern_addr = str(hex(data['kernel_addr']))
    kern_addr = kern_addr[2:]
    kern_addr = f'0x0{kern_addr}'
    r_kern_addr = kern_addr[3:]
    r_kern_addr = f'0x{r_kern_addr}0'

    # Getting the size(in sectors)
    kern_size = int(len(kernel_binary_data)/512)

    # Checking the size
    if kern_size * 512 < len(kernel_binary_data):
        kern_size += 1
    
    # Making the hex value of kern_size look good
    kern_size = str(hex(kern_size))
    kern_size = kern_size[2:]
    kern_size = f'0x0{kern_size}'

    sector_for_kern = hex(0x02 + int(ss_size, base=16)-1)
    sector_for_kern = str(sector_for_kern)
    sector_for_kern = sector_for_kern[2:]
    sector_for_kern = f'0x0{sector_for_kern}'

    # The code :D
    boot = f"""org 0x7C00
use16

xor ax, ax
mov es, ax
mov ds, ax

cli
mov bp, 0x7C00
mov sp, bp
mov ss, ax
sti

mov ax, [Info.second_stage_addr]
mov es, ax
xor bx, bx

mov ah, 0x02
mov al, [Info.second_stage_size]
mov ch, 0x00
mov cl, [Info.sector]
mov dh, 0x00
mov dl, 0x80
int 0x13
jc failed

mov ax, [Info.second_stage_size]
add [Info.sector], ax
mov [Info.sector], ax

mov ax, [Info.kernel_addr]
mov es, ax
xor bx, bx

mov ah, 0x02
mov al, [Info.kernel_size]
mov ch, 0x00
mov cl, {sector_for_kern}
mov dh, 0x00
mov dl, 0x80
int 0x13
jc failed

mov ax, [Info.kernel_size]
add [Info.sector], ax

mov ax, [Info.sector]
mov [sector_addr], ax

jmp word 0x0:{r_ss_addr}

jmp $

sector_addr		equ 0x5000

Info:
	; Sector information
	.sector				db 0x02
	; Second stage information
	.second_stage_size	dw (second_stageE - second_stage) / 512 + 2
	.second_stage_addr	dw 0x07E0
	.second_stage_loc	dw 0x7E00
	; Kernel information
	.kernel_size		dw (kernelE - kernel) / 512 + 1
	.kernel_addr		dw 0x0900
	.kernel_loc			dw 0x9000

failed:
.failed_loop:
	jmp .failed_loop

times 510 - ($ - $$) db 0x0
dw 0xAA55

second_stage: incbin "{data['second_stage_binary']}"
second_stageE:

kernel: incbin "{data['kernel_binary']}"
kernelE:
    """

    # Makefile :D
    FLAGS = "{FLAGS}"
    makefile = f""".PHONY: run
.PHONY: clean
.PHONY: build

FLAGS = -masm=intel -O1 -Wno-error -c -nostdinc -nostdlib -fno-builtin -fno-stack-protector -ffreestanding -m32
run: build
	@qemu-system-i386 -drive format=raw,file=bin/OS.image

build:
	@nasm protocol/protocol_util.asm -f elf32 -o bin/protocol_util.o
	@gcc ${FLAGS} -o bin/{second_stage_source_code_file_o} {second_stage_source_code_file}
	@gcc ${FLAGS} -o bin/{kernel_source_code_file_o} {kernel_source_code_file}
	@ld -m elf_i386 -TOS/linker.ld -nostdlib --nmagic -o bin/boot.out bin/{second_stage_source_code_file_o} bin/protocol_util.o
	@ld -m elf_i386 -TOS/kernel.ld -nostdlib --nmagic -o bin/kernel.out bin/{kernel_source_code_file_o} bin/protocol_util.o
	@objcopy -O binary bin/boot.out bin/boot.bin
	@objcopy -O binary bin/kernel.out bin/kernel.bin
	@nasm boot/boot.asm -f bin -o bin/bootloader.bin
    @cat bin/bootloader.bin bin/boot.bin bin/kernel.bin > bin/OS.image

clean:
	@rm -rf bin/*.out
	@rm -rf bin/*.o
	@rm -rf bin/*.bin

    """

    # Write the code to the bootloader file so our OS can load it :D
    file = open("../boot/boot.asm", "w")
    file.write(boot)
    file.close()

    file = open("../Makefile", 'w')
    file.write(makefile)
    file.close()